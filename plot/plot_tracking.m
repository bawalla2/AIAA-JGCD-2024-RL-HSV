function figcount = plot_tracking...
    (alg_settings_cell, out_data_cell, group_settings, master_settings)
% *************************************************************************
% *************************************************************************
% *************************************************************************
%
% PLOTS FOR TRACKING RESPONSES
%
% Brent Wallace  
%
% 2022-08-13
%
% *************************************************************************
%
% CALL SYNTAX
%
% *************************************************************************
%
% figcount = plot_tracking...
% (alg_settings_cell, out_data_cell, group_settings)
%
% *************************************************************************
%
% INPUTS
%
% *************************************************************************
%
% alg_settings      (Struct) Algorithm settings/parameters corresponding to
%                   the current preset. See respective algorithm .m-file
%                   for a description of the relevant fields.
%                   NOTE: Regardless of the algorithm, alg_settings must
%                   contain the following fields:
%   group_settings   (Struct) contains plot settings for this particular
%                   preset. Has the following fields:
%       relpath     (String) Name of the folder to save plots to for this
%                   preset. This could be the preset tag, or any
%                   other convenient identifier.
% out_data          (Struct) Output data generated by the algorithm. See
%                   respective algorithm .m-file for a description of the
%                   relevant fields.
% group_settings     (Struct) contains plot settings for the program. Has
%                   the following fields which are used here:
%   savefigs        (Boolean) 1 = save figures to PDF. 0 = don't save.
%   figcount        (Integer) Cumulative figure count before this function
%                   has been called.
%
% *************************************************************************
%
% OUTPUTS
%
% *************************************************************************
%
% figcount          (Integer) Cumulative figure count after all plots in
%                   this function have been created.
%
% *************************************************************************
% *************************************************************************
% *************************************************************************

%%
% *************************************************************************
% *************************************************************************
% *************************************************************************
%
% INITIALIZATION
% 
% *************************************************************************
% *************************************************************************
% *************************************************************************

% Unpack plot settings
savefigs = group_settings.savefigs;
if savefigs
    relpath = group_settings.relpath;
end
% dolegend = group_settings.dolegend;

% Extract system and system plot settings
sys_plot_settings = group_settings.sys_plot_settings;

% Master plot settings
psett_master = master_settings.psett_master;

% Initialize figure counter
figcount = group_settings.figcount;

% x-axis label for time plots
tlabel = psett_master.tlabel;

% Extract plot time window
tsim_plot = group_settings.tsim_plot;

% Check if user desired preset-specific formatting
do_indiv_sett = isfield(group_settings, 'indiv_sett_cell');
if do_indiv_sett   
    indiv_sett_cell = group_settings.indiv_sett_cell;
end

% State trajectory x(t) unit scaling. E.g., if x_1(t) is angular
% displacement but is desired in degrees, declare the field 'sclvec' and
% put sclvec(1) = 180/pi.
x_sclvec = sys_plot_settings.x_sclvec;


% Legend for all states in one plot
x_t_state_lgd = sys_plot_settings.x_t_state_lgd;

% Properties of output variables
y_propts_cell = sys_plot_settings.y_propts_cell;



% *************************************************************************
% *************************************************************************
%
% EXTRACT MODEL DATA
%
% *************************************************************************
% *************************************************************************

% System
sys = master_settings.sys;             % System array
n = sys.n;                          % System order
m = sys.m;                          % System input dimension
% model = sys.model;                  % System model

% System cell array
model_cell = sys.model_cell;

% Indices of nominal, perturbed models
indnom = sys.indnom;

% Nominal, perturbed models
model = get_elt_multidim(model_cell, indnom);             % System model

% Degree/radian conversions
D2R = pi/180;
R2D = 180/pi;


% *************************************************************************
% *************************************************************************
%
% PREPARE FOR MAIN LOOP
%
% *************************************************************************
% *************************************************************************

% Number of presets executed
numpresets = group_settings.numpresets;


% Check if more than one preset is being executed. If so, create legend
dolgd = numpresets > 1;

% Has integral augmentation (=1) or not (=0)
hasintaug = master_settings.hasintaug;

% Get legend entries
lgd_p = group_settings.lgd_p;


% Store figure counter before looping
figcount_begin = figcount;

% Indices of output variables tracked
inds_xr = model.inds_xr;

% ***********************
%       
% PREPARE LEGENDS, COUNTERS
%   

% % Model linear (=1) or nonlinear (=0)
% lin1nonlin0vec = group_settings.lin1nonlin0vec;

% Do prefilter (=1) or not (=0)
has_pf = isfield(group_settings, 'pf1nopf0vec');
if has_pf
    pf1nopf0vec = group_settings.pf1nopf0vec;
end

% Check if at least one of the designs uses a prefilter
if has_pf
    has_pf = sum(pf1nopf0vec) > 0;
end
if has_pf
    minindpf = min(find(pf1nopf0vec));
end

% % Prepare legend for nonlinear plant presets
% inds_nonlin = find(~lin1nonlin0vec);
% num_nonlin = sum(~lin1nonlin0vec);
% lgd_nonlin = cell(num_nonlin,1);
% if do_indiv_sett
%     indiv_sett_cell_nonlin = cell(num_nonlin,1);
% end
% for i = 1:num_nonlin
%     ind = inds_nonlin(i);
%     lgd_nonlin{i} = alg_settings_cell{ind}.plot_settings.legend_entry;
%     if do_indiv_sett
%         indiv_sett_cell_nonlin{i} = indiv_sett_cell{ind};
%     end
% end


% Get filtered reference commands if any of the methods use a prefilter
if has_pf
    indspf = out_data_cell{minindpf}.inds.indspf;
    rfiltmat = out_data_cell{minindpf}.xmat(:,indspf);
    tvecrfilt = out_data_cell{minindpf}.tvec;
end


% *************************************************************************
% *************************************************************************
% *************************************************************************
%
% BEGIN MAIN LOOP
%
% Loop over the presets in the group
%
% *************************************************************************
% *************************************************************************
% *************************************************************************

% % Begin counters which keep track of nonlinear and NDI presets
% cnt_nonlin = 0;

for presetcount = 1:numpresets

% *************************************************************************
% *************************************************************************
%
% INIT
%
% *************************************************************************
% *************************************************************************

% Reset figure counter
figcount = figcount_begin;

% Get current alg_settings struct
alg_settings = alg_settings_cell{presetcount};

% Get current out_data struct
out_data = out_data_cell{presetcount};

% *************************************************************************
%
% EXTRACT SIMULATION MODEL SETTINGS
% 
% *************************************************************************

% % Simulation model
% model_sim = alg_settings.model_sim;

% Simulation model
model_sim_ind = alg_settings.model_sim_ind;
model_sim = model_cell{model_sim_ind};


% ***********************
%       
% SYSTEM PARAMETERS
%      
% 
% % Unit conversions
% sy = model_sim.lin.io.syd;


% ***********************
%       
% TRIM CONDITIONS
%    

% Numerically solved-for values
xe = model_sim.trimconds.xe;
ue = model_sim.trimconds.ue;


% ***********************
%       
% PRESET SETTINGS
%   

% % Model linear (=1) or nonlinear (=0)
% lin1nonlin0 = alg_settings.lin1nonlin0;
% 
% 
% % If model nonlinear, increment counter
% if ~lin1nonlin0
%     cnt_nonlin = cnt_nonlin + 1;
% end


% *************************************************************************
% *************************************************************************
%
% UNPACK ALGORITHM OUTPUT DATA
%
% See respective algorithm .m-file for details of 'out_data' struct fields.
%
% *************************************************************************
% *************************************************************************

tvec = out_data.tvec;
xmat = out_data.xmat;
umat = out_data.umat;

inds = out_data.inds;

rtmat = out_data.rtmat;

% Reference command data
yrmat = out_data.yrmat;

% Output data
ymat = out_data.ymat;

% Tracking error data
emat = out_data.emat;


%%
% *************************************************************************
% *************************************************************************
% *************************************************************************
%
% BEGIN MAIN
% 
% *************************************************************************
% *************************************************************************
% *************************************************************************

% *************************************************************************
% *************************************************************************
%
% PLOTS: PERTAINING TO OUTPUT RESPONSES y_i(t) 
%
% *************************************************************************
% *************************************************************************

for ycnt = 1:m

% ***********************
%
% GET PROPERTIES OF CURRENT OUTPUT VARIABLE
%

ind_xri = inds_xr(ycnt);

y_propts = y_propts_cell{ycnt};
currvarname = y_propts.varname;
currtexname = y_propts.texname;
currengname = y_propts.engname;
currunits = y_propts.units;
currscl = x_sclvec(ind_xri);

% Formatting 
currtexnamer = [currtexname '_{r}'];
currtexname_eqn = ['$' currtexname '$'];
currtexname_eqnt = ['$' currtexname '(t)$'];
currtexname_eqnr = ['$' currtexnamer '$'];
currtexname_eqnrt = ['$' currtexnamer '(t)$'];
currtexname_eqnrft = ['$' currtexname '_{r,filt}(t)$'];

% Current state variable title, axis label
ttl_x = sys_plot_settings.x_t_title{ind_xri};
ylabel_x = sys_plot_settings.x_t_ylabel{ind_xri};

% ***********************
%
% GET OUTPUT, TRACKING ERROR
%

yvec = xmat(:,ind_xri);
yrvec = yrmat(:,ycnt);
evec = emat(:,ycnt);


% *************************************************************************
%
% PLOT: OUTPUT y_i(t) -- SHIFTED TO TRIM
%
% *************************************************************************

y0 = xe(ind_xri);

% PLOT
figure(figcount)
hold on;
h_fig = plot(tvec, currscl*(yvec-y0)); 
if presetcount == numpresets

    ttl = ttl_x;
    title(ttl); 
    xlabel(tlabel); 
    xlim([0 tsim_plot]);
    ylbl = ylabel_x;
    ylabel(ylbl);

   
    lgd = lgd_p;
    legend(lgd)

    if do_indiv_sett
        indiv_sett_cell_tmp = indiv_sett_cell;
    end


    % Format plot
    p_sett.figcount = figcount;
    if do_indiv_sett
        p_sett.indiv_sett_cell = indiv_sett_cell_tmp;
    end
    plot_format(p_sett); 
    clear p_sett;
    
    % SAVE PLOT
    if savefigs
        filename = [currvarname 't_xe'];
        savepdf(figcount, relpath, filename); 
    end
end

% Increment figure counter
figcount = figcount + 1;

% *************************************************************************
%
% PLOT: OUTPUT y_i(t) AND REFERENCE COMMAND y_{r,i}(t)
%
% *************************************************************************

% PLOT
figure(figcount)
hold on;
h_fig = plot(tvec, currscl*yvec); 
if presetcount == numpresets
    h_fig = plot(tvec, currscl*yrvec); 
    if has_pf
        h_fig = plot(tvecrfilt, currscl*rfiltmat(:,ycnt));
    end

    ttl = [currengname ' ' currtexname_eqn ' and Ref. ' ...
        currengname ' '  currtexname_eqnr];
    title(ttl); 
    xlabel(tlabel); 
    xlim([0 tsim_plot]);
    ylbl = [currtexname_eqnt ', ' currtexname_eqnrt ' (' currunits ')'];
    ylabel(ylbl);


    if has_pf
        lgd = cell(numpresets+2,1);
    else
        lgd = cell(numpresets+1,1);
    end
    for i = 1:numpresets
        lgd{i} = [currtexname_eqnt ' ' lgd_p{i}];
    end
    lgd{numpresets+1} = currtexname_eqnrt;
    if has_pf
        lgd{numpresets+2} = currtexname_eqnrft;
    end

    legend(lgd)

    if do_indiv_sett
        indiv_sett_cell_tmp = indiv_sett_cell;
        indiv_sett_cell_tmp = [indiv_sett_cell_tmp; {{}}];
        if has_pf
            indiv_sett_cell_tmp = [indiv_sett_cell_tmp; {{}}];
        end
    end


    % Format plot
    p_sett.figcount = figcount;
    if do_indiv_sett
        p_sett.indiv_sett_cell = indiv_sett_cell_tmp;
    end
    plot_format(p_sett); 
    clear p_sett;
    
    % SAVE PLOT
    if savefigs
        filename = [currvarname 't' currvarname 'rt'];
        savepdf(figcount, relpath, filename); 
    end
end

% Increment figure counter
figcount = figcount + 1;


% *************************************************************************
%
% PLOT: OUTPUT y_i(t) AND REFERENCE COMMAND y_{r,i}(t) -- SHIFTED TO TRIM
%
% *************************************************************************

y0 = xe(ind_xri);

% PLOT
figure(figcount)
hold on;
h_fig = plot(tvec, currscl*(yvec-y0)); 
if presetcount == numpresets
    h_fig = plot(tvec, currscl*(yrvec-y0)); 
    if has_pf
        h_fig = plot(tvecrfilt, currscl*(rfiltmat(:,ycnt)-y0));
    end

    ttl = [currengname ' ' currtexname_eqn ' and Ref. ' ...
        currengname ' '  currtexname_eqnr];
    title(ttl); 
    xlabel(tlabel); 
    xlim([0 tsim_plot]);
    ylbl = [currtexname_eqnt ', ' currtexname_eqnrt ' (' currunits ')'];
    ylabel(ylbl);

    if has_pf
        lgd = cell(numpresets+2,1);
    else
        lgd = cell(numpresets+1,1);
    end
    for i = 1:numpresets
        lgd{i} = [currtexname_eqnt ' ' lgd_p{i}];
    end
    lgd{numpresets+1} = currtexname_eqnrt;
    if has_pf
        lgd{numpresets+2} = currtexname_eqnrft;
    end
    legend(lgd)

    if do_indiv_sett
        indiv_sett_cell_tmp = indiv_sett_cell;
        indiv_sett_cell_tmp = [indiv_sett_cell_tmp; {{}}];
        if has_pf
            indiv_sett_cell_tmp = [indiv_sett_cell_tmp; {{}}];
        end
    end


    % Format plot
    p_sett.figcount = figcount;
    if do_indiv_sett
        p_sett.indiv_sett_cell = indiv_sett_cell_tmp;
    end
    plot_format(p_sett); 
    clear p_sett;
    
    % SAVE PLOT
    if savefigs
        filename = [currvarname 't' currvarname 'rt_xe'];
        savepdf(figcount, relpath, filename); 
    end
end

% Increment figure counter
figcount = figcount + 1;


% *************************************************************************
%
% PLOT: TRACKING ERROR y_i(t) - y_{r,i}(t)
%
% *************************************************************************

% PLOT
figure(figcount)
hold on;
h_fig = plot(tvec, -currscl*evec); 

if presetcount == numpresets

    ttl = [currengname ' Tracking Error $e_{' currtexname '} = ' ...
    currtexnamer ' - ' currtexname '$'];
    title(ttl); 
    xlabel(tlabel); 
    xlim([0 tsim_plot]);
    ylbl = ['$e_{' currtexname '}(t)$ (' currunits ')'];
    ylabel(ylbl);

    % Add legend if both plant types are being plotted
    if dolgd 
        legend(lgd_p);
    end

    % Format plot
    p_sett.figcount = figcount;
    if do_indiv_sett
        p_sett.indiv_sett_cell = indiv_sett_cell;
    end
    plot_format(p_sett); 
    clear p_sett;
    
    % SAVE PLOT
    if savefigs
        filename = ['e' currvarname 't'];
        savepdf(figcount, relpath, filename); 
    end
end

% Increment figure counter
figcount = figcount + 1;


% *************************************************************************
%
% PLOT: INTEGRAL ERROR
%
% *************************************************************************


if hasintaug

zvec = xmat(:,inds.indsz(1)+ycnt-1);

% PLOT
figure(figcount)
hold on;
h_fig = plot(tvec, -zvec); 

if presetcount == numpresets

    ttl = ['Integral ' currengname ' Error $'...
        'z_{' currtexname '} = \int_{0}^{t}(' currtexnamer ...
        ' - ' currtexname ')dt$'];
    title(ttl); 
    xlabel(tlabel); 
    xlim([0 tsim_plot]);
    ylbl = ['$z_{' currtexname '}(t)$'];
    ylabel(ylbl);
    
    % Add legend if both plant types are being plotted
    if dolgd 
        legend(lgd_p);
    end

    % Format plot
    p_sett.figcount = figcount;
    if do_indiv_sett
        p_sett.indiv_sett_cell = indiv_sett_cell;
    end
    plot_format(p_sett); 
    clear p_sett;
    
    % SAVE PLOT
    if savefigs
        filename = ['z' currvarname 't'];
        savepdf(figcount, relpath, filename); 
    end
end

% Increment figure counter
figcount = figcount + 1; 

end




end




end                     % END MAIN LOOP


% *************************************************************************
% *************************************************************************
%
% END MAIN LOOP
%
% *************************************************************************
% *************************************************************************


